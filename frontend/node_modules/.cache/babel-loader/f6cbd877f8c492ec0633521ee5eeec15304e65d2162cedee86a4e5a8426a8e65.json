{"ast":null,"code":"var _jsxFileName = \"E:\\\\BVS-MEA\\\\synthetic tool\\\\WithoutGUI\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport ConnectionForm from './components/ConnectionForm';\nimport DatabaseSelector from './components/DatabaseSelector';\nimport TableSelector from './components/TableSelector';\nimport ColumnClassifier from './components/ColumnClassifier';\nimport FakeTableViewer from './components/FakeTableViewer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nexport default function App() {\n  _s();\n  const [step, setStep] = useState(1);\n  const [conn, setConn] = useState(null);\n  const [databases, setDatabases] = useState([]);\n  const [tables, setTables] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [fakeData, setFakeData] = useState([]);\n  const [ctx, setCtx] = useState({}); // holds { database, table, classification }\n\n  const restart = () => {\n    setStep(1);\n    setConn(null);\n    setDatabases([]);\n    setTables([]);\n    setColumns([]);\n    setFakeData([]);\n    setCtx({});\n  };\n\n  // 1️⃣ Connect -> list databases\n  const handleConnect = async props => {\n    try {\n      const res = await axios.post(`${API_URL}/api/connect/databases`, props);\n      setDatabases(res.data);\n      setConn(props);\n      setStep(2);\n    } catch (e) {\n      alert('Connection failed: ' + e.message);\n    }\n  };\n\n  // 2️⃣ Database selected -> list tables\n  const handleSelectDb = async db => {\n    try {\n      const res = await axios.post(\n      // 🔑 point at /api/{db}/tables\n      `${API_URL}/api/${encodeURIComponent(db)}/tables`, conn);\n      setTables(res.data);\n      setCtx(c => ({\n        ...c,\n        database: db\n      }));\n      setStep(3);\n    } catch (e) {\n      alert('Load tables failed: ' + e.message);\n    }\n  };\n\n  // 3️⃣ Table selected -> classify columns\n  const handleSelectTable = async table => {\n    try {\n      const res = await axios.post(`${API_URL}/api/classify`, {\n        ...conn,\n        database: ctx.database,\n        table\n      });\n      setColumns(res.data);\n      setCtx(c => ({\n        ...c,\n        table\n      }));\n      setStep(4);\n    } catch (e) {\n      alert('Classify failed: ' + e.message);\n    }\n  };\n\n  // 4️⃣ Classification complete -> generate fake data\n  const handleClassificationComplete = async classification => {\n    try {\n      const res = await axios.post(`${API_URL}/api/fake`, {\n        ...conn,\n        database: ctx.database,\n        table: ctx.table,\n        columns: classification\n      });\n      setFakeData(res.data);\n      setCtx(c => ({\n        ...c,\n        classification\n      }));\n      setStep(5);\n    } catch (e) {\n      alert('Fake-data generation failed: ' + e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [step === 1 && /*#__PURE__*/_jsxDEV(ConnectionForm, {\n      onConnect: handleConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 22\n    }, this), step === 2 && /*#__PURE__*/_jsxDEV(DatabaseSelector, {\n      databases: databases,\n      onSelectDb: handleSelectDb,\n      onBack: restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), step === 3 && /*#__PURE__*/_jsxDEV(TableSelector, {\n      tables: tables,\n      onSelectTable: handleSelectTable,\n      onBack: () => setStep(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), step === 4 && /*#__PURE__*/_jsxDEV(ColumnClassifier, {\n      columns: columns,\n      onComplete: handleClassificationComplete,\n      onBack: () => setStep(3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), step === 5 && /*#__PURE__*/_jsxDEV(FakeTableViewer, {\n      data: fakeData,\n      onRegenerate: () => handleClassificationComplete(ctx.classification),\n      onRestart: restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"E0fG+WCnuu+ZNYrdRIanRN+5NLo=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","ConnectionForm","DatabaseSelector","TableSelector","ColumnClassifier","FakeTableViewer","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","_s","step","setStep","conn","setConn","databases","setDatabases","tables","setTables","columns","setColumns","fakeData","setFakeData","ctx","setCtx","restart","handleConnect","props","res","post","data","e","alert","message","handleSelectDb","db","encodeURIComponent","c","database","handleSelectTable","table","handleClassificationComplete","classification","className","children","onConnect","fileName","_jsxFileName","lineNumber","columnNumber","onSelectDb","onBack","onSelectTable","onComplete","onRegenerate","onRestart","_c","$RefreshReg$"],"sources":["E:/BVS-MEA/synthetic tool/WithoutGUI/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport ConnectionForm from './components/ConnectionForm';\r\nimport DatabaseSelector from './components/DatabaseSelector';\r\nimport TableSelector from './components/TableSelector';\r\nimport ColumnClassifier from './components/ColumnClassifier';\r\nimport FakeTableViewer from './components/FakeTableViewer';\r\nimport './App.css';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nexport default function App() {\r\n  const [step, setStep] = useState(1);\r\n  const [conn, setConn] = useState(null);\r\n  const [databases, setDatabases] = useState([]);\r\n  const [tables, setTables] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [fakeData, setFakeData] = useState([]);\r\n  const [ctx, setCtx] = useState({}); // holds { database, table, classification }\r\n\r\n  const restart = () => {\r\n    setStep(1);\r\n    setConn(null);\r\n    setDatabases([]);\r\n    setTables([]);\r\n    setColumns([]);\r\n    setFakeData([]);\r\n    setCtx({});\r\n  };\r\n\r\n  // 1️⃣ Connect -> list databases\r\n  const handleConnect = async (props) => {\r\n    try {\r\n      const res = await axios.post(\r\n        `${API_URL}/api/connect/databases`,\r\n        props\r\n      );\r\n      setDatabases(res.data);\r\n      setConn(props);\r\n      setStep(2);\r\n    } catch (e) {\r\n      alert('Connection failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // 2️⃣ Database selected -> list tables\r\n  const handleSelectDb = async (db) => {\r\n    try {\r\n      const res = await axios.post(\r\n        // 🔑 point at /api/{db}/tables\r\n        `${API_URL}/api/${encodeURIComponent(db)}/tables`,\r\n        conn\r\n      );\r\n      setTables(res.data);\r\n      setCtx((c) => ({ ...c, database: db }));\r\n      setStep(3);\r\n    } catch (e) {\r\n      alert('Load tables failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // 3️⃣ Table selected -> classify columns\r\n  const handleSelectTable = async (table) => {\r\n    try {\r\n      const res = await axios.post(`${API_URL}/api/classify`, {\r\n        ...conn,\r\n        database: ctx.database,\r\n        table,\r\n      });\r\n      setColumns(res.data);\r\n      setCtx((c) => ({ ...c, table }));\r\n      setStep(4);\r\n    } catch (e) {\r\n      alert('Classify failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // 4️⃣ Classification complete -> generate fake data\r\n  const handleClassificationComplete = async (classification) => {\r\n    try {\r\n      const res = await axios.post(`${API_URL}/api/fake`, {\r\n        ...conn,\r\n        database: ctx.database,\r\n        table: ctx.table,\r\n        columns: classification,\r\n      });\r\n      setFakeData(res.data);\r\n      setCtx((c) => ({ ...c, classification }));\r\n      setStep(5);\r\n    } catch (e) {\r\n      alert('Fake-data generation failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {step === 1 && <ConnectionForm onConnect={handleConnect} />}\r\n      {step === 2 && (\r\n        <DatabaseSelector\r\n          databases={databases}\r\n          onSelectDb={handleSelectDb}\r\n          onBack={restart}\r\n        />\r\n      )}\r\n      {step === 3 && (\r\n        <TableSelector\r\n          tables={tables}\r\n          onSelectTable={handleSelectTable}\r\n          onBack={() => setStep(2)}\r\n        />\r\n      )}\r\n      {step === 4 && (\r\n        <ColumnClassifier\r\n          columns={columns}\r\n          onComplete={handleClassificationComplete}\r\n          onBack={() => setStep(3)}\r\n        />\r\n      )}\r\n      {step === 5 && (\r\n        <FakeTableViewer\r\n          data={fakeData}\r\n          onRegenerate={() =>\r\n            handleClassificationComplete(ctx.classification)\r\n          }\r\n          onRestart={restart}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}