{"ast":null,"code":"var _jsxFileName = \"E:\\\\BVS-MEA\\\\synthetic tool\\\\WithoutGUI\\\\frontend\\\\src\\\\components\\\\ColumnClassifier.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLUMN_TYPES = ['customerName', 'phoneNumber', 'email', 'balance', 'accountNumber', 'IBAN', 'isCorporateCustomer', 'customerNumber', 'nationalID', 'address', 'UNKNOWN'];\nexport default function ColumnClassifier({\n  previewData,\n  suggestions,\n  // now an array of { columnName, suggestion }\n  onComplete,\n  onBack\n}) {\n  _s();\n  // 1) extract real DB column keys (col1, col2, …)\n  const rawColumns = previewData[0] ? Object.keys(previewData[0]) : [];\n\n  // 2) build a working list by zipping rawColumns + suggestions\n  const [working, setWorking] = useState([]);\n  useEffect(() => {\n    const initial = rawColumns.map((colName, i) => {\n      var _suggestions$i$sugges, _suggestions$i;\n      return {\n        columnName: colName,\n        suggestion: (_suggestions$i$sugges = (_suggestions$i = suggestions[i]) === null || _suggestions$i === void 0 ? void 0 : _suggestions$i.suggestion) !== null && _suggestions$i$sugges !== void 0 ? _suggestions$i$sugges : 'UNKNOWN'\n      };\n    });\n    setWorking(initial);\n  }, [previewData, suggestions]);\n  const [idx, setIdx] = useState(0);\n  const [editing, setEditing] = useState(false);\n  const curr = working[idx] || {\n    columnName: '',\n    suggestion: ''\n  };\n  const confirm = () => {\n    if (idx + 1 === working.length) {\n      onComplete(working);\n    } else {\n      setIdx(idx + 1);\n      setEditing(false);\n    }\n  };\n  const change = val => {\n    const copy = [...working];\n    copy[idx].suggestion = val;\n    setWorking(copy);\n    setEditing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"classifier\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Classify Columns (\", idx + 1, \" / \", working.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onBack,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Column:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), \" \", curr.columnName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Suggested:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), \" \", curr.suggestion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), editing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"edit\",\n        children: \"Override Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"edit\",\n        value: curr.suggestion,\n        onChange: e => change(e.target.value),\n        children: COLUMN_TYPES.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: t,\n          children: t\n        }, t, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setEditing(true),\n      children: \"\\u270E Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: confirm,\n      children: \"\\u2714 Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(ColumnClassifier, \"/Ut3qDv94DSkTDOuivzDDoiuaas=\");\n_c = ColumnClassifier;\nvar _c;\n$RefreshReg$(_c, \"ColumnClassifier\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","COLUMN_TYPES","ColumnClassifier","previewData","suggestions","onComplete","onBack","_s","rawColumns","Object","keys","working","setWorking","initial","map","colName","i","_suggestions$i$sugges","_suggestions$i","columnName","suggestion","idx","setIdx","editing","setEditing","curr","confirm","length","change","val","copy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","id","value","onChange","e","target","t","_c","$RefreshReg$"],"sources":["E:/BVS-MEA/synthetic tool/WithoutGUI/frontend/src/components/ColumnClassifier.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst COLUMN_TYPES = [\r\n  'customerName',\r\n  'phoneNumber',\r\n  'email',\r\n  'balance',\r\n  'accountNumber',\r\n  'IBAN',\r\n  'isCorporateCustomer',\r\n  'customerNumber',\r\n  'nationalID',\r\n  'address',\r\n  'UNKNOWN',\r\n];\r\n\r\nexport default function ColumnClassifier({\r\n  previewData,\r\n  suggestions,   // now an array of { columnName, suggestion }\r\n  onComplete,\r\n  onBack,\r\n}) {\r\n  // 1) extract real DB column keys (col1, col2, …)\r\n  const rawColumns = previewData[0]\r\n    ? Object.keys(previewData[0])\r\n    : [];\r\n\r\n  // 2) build a working list by zipping rawColumns + suggestions\r\n  const [working, setWorking] = useState([]);\r\n  useEffect(() => {\r\n    const initial = rawColumns.map((colName, i) => ({\r\n      columnName: colName,\r\n      suggestion: suggestions[i]?.suggestion ?? 'UNKNOWN'\r\n    }));\r\n    setWorking(initial);\r\n  }, [previewData, suggestions]);\r\n\r\n  const [idx, setIdx] = useState(0);\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const curr = working[idx] || { columnName: '', suggestion: '' };\r\n\r\n  const confirm = () => {\r\n    if (idx + 1 === working.length) {\r\n      onComplete(working);\r\n    } else {\r\n      setIdx(idx + 1);\r\n      setEditing(false);\r\n    }\r\n  };\r\n\r\n  const change = (val) => {\r\n    const copy = [...working];\r\n    copy[idx].suggestion = val;\r\n    setWorking(copy);\r\n    setEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"classifier\">\r\n      <h3>\r\n        Classify Columns ({idx + 1} / {working.length})\r\n      </h3>\r\n      <button onClick={onBack}>Back</button>\r\n\r\n      <p>\r\n        <strong>Column:</strong> {curr.columnName}\r\n      </p>\r\n      <p>\r\n        <strong>Suggested:</strong> {curr.suggestion}\r\n      </p>\r\n\r\n      {editing ? (\r\n        <>\r\n          <label htmlFor=\"edit\">Override Type</label>\r\n          <select\r\n            id=\"edit\"\r\n            value={curr.suggestion}\r\n            onChange={(e) => change(e.target.value)}\r\n          >\r\n            {COLUMN_TYPES.map((t) => (\r\n              <option key={t} value={t}>\r\n                {t}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </>\r\n      ) : (\r\n        <button onClick={() => setEditing(true)}>✎ Edit</button>\r\n      )}\r\n\r\n      <button onClick={confirm}>✔ Confirm</button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}