{"ast":null,"code":"var _jsxFileName = \"E:\\\\BVS-MEA\\\\synthetic tool\\\\WithoutGUI\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport ConnectionForm from './components/ConnectionForm';\nimport DatabaseSelector from './components/DatabaseSelector';\nimport TableSelector from './components/TableSelector';\nimport ColumnClassifier from './components/ColumnClassifier';\nimport FakeTableViewer from './components/FakeTableViewer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nexport default function App() {\n  _s();\n  const [step, setStep] = useState(1);\n  const [conn, setConn] = useState(null);\n  const [databases, setDatabases] = useState([]);\n  const [tables, setTables] = useState([]);\n  const [previewData, setPreviewData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [fakeData, setFakeData] = useState([]);\n  const [ctx, setCtx] = useState({}); // holds { database, table, classification }\n\n  const restart = () => {\n    setStep(1);\n    setConn(null);\n    setDatabases([]);\n    setTables([]);\n    setPreviewData([]);\n    setColumns([]);\n    setFakeData([]);\n    setCtx({});\n  };\n\n  // Step 1 → Connect & list databases\n  const handleConnect = async props => {\n    try {\n      const res = await axios.post(`${API_URL}/api/connect/databases`, props);\n      setDatabases(res.data);\n      setConn(props);\n      setStep(2);\n    } catch (e) {\n      alert('Connection failed: ' + e.message);\n    }\n  };\n\n  // Step 2 → Select database & list tables\n  const handleSelectDb = async db => {\n    try {\n      const res = await axios.post(`${API_URL}/api/${encodeURIComponent(db)}/tables`, conn);\n      setTables(res.data);\n      setCtx(c => ({\n        ...c,\n        database: db\n      }));\n      setStep(3);\n    } catch (e) {\n      alert('Load tables failed: ' + e.message);\n    }\n  };\n\n  // Step 3 → Select table → fetch preview + classification → go to Step 4\n  const handleSelectTable = async table => {\n    try {\n      // 1) fetch table preview\n      const previewRes = await axios.post(\n      // note: limit=10 by default\n      `${API_URL}/api/${encodeURIComponent(ctx.database)}/tables/${encodeURIComponent(table)}/preview?limit=10`, conn);\n      setPreviewData(previewRes.data);\n\n      // 2) fetch classification suggestions\n      const classifyRes = await axios.post(`${API_URL}/api/classify`, {\n        ...conn,\n        database: ctx.database,\n        table\n      });\n      setColumns(classifyRes.data);\n      setCtx(c => ({\n        ...c,\n        table\n      }));\n      setStep(4);\n    } catch (e) {\n      alert('Error loading table/classification: ' + e.message);\n    }\n  };\n\n  // Step 4 → Complete classification → generate fake data\n  const handleClassificationComplete = async classification => {\n    try {\n      const res = await axios.post(`${API_URL}/api/fake`, {\n        ...conn,\n        database: ctx.database,\n        table: ctx.table,\n        columns: classification\n      });\n      setFakeData(res.data);\n      setCtx(c => ({\n        ...c,\n        classification\n      }));\n      setStep(5);\n    } catch (e) {\n      alert('Fake-data generation failed: ' + e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [step === 1 && /*#__PURE__*/_jsxDEV(ConnectionForm, {\n      onConnect: handleConnect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 22\n    }, this), step === 2 && /*#__PURE__*/_jsxDEV(DatabaseSelector, {\n      databases: databases,\n      onSelectDb: handleSelectDb,\n      onBack: restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), step === 3 && /*#__PURE__*/_jsxDEV(TableSelector, {\n      tables: tables,\n      onSelectTable: handleSelectTable,\n      onBack: () => setStep(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), step === 4 && /*#__PURE__*/_jsxDEV(ColumnClassifier, {\n      previewData: previewData,\n      columns: columns,\n      onComplete: handleClassificationComplete,\n      onBack: () => setStep(3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), step === 5 && /*#__PURE__*/_jsxDEV(FakeTableViewer, {\n      data: fakeData,\n      onRegenerate: () => handleClassificationComplete(ctx.classification),\n      onRestart: restart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R/32N8pg7I+XxZ9utLd3Qw5IDPo=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","ConnectionForm","DatabaseSelector","TableSelector","ColumnClassifier","FakeTableViewer","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","_s","step","setStep","conn","setConn","databases","setDatabases","tables","setTables","previewData","setPreviewData","columns","setColumns","fakeData","setFakeData","ctx","setCtx","restart","handleConnect","props","res","post","data","e","alert","message","handleSelectDb","db","encodeURIComponent","c","database","handleSelectTable","table","previewRes","classifyRes","handleClassificationComplete","classification","className","children","onConnect","fileName","_jsxFileName","lineNumber","columnNumber","onSelectDb","onBack","onSelectTable","onComplete","onRegenerate","onRestart","_c","$RefreshReg$"],"sources":["E:/BVS-MEA/synthetic tool/WithoutGUI/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport ConnectionForm from './components/ConnectionForm';\r\nimport DatabaseSelector from './components/DatabaseSelector';\r\nimport TableSelector from './components/TableSelector';\r\nimport ColumnClassifier from './components/ColumnClassifier';\r\nimport FakeTableViewer from './components/FakeTableViewer';\r\nimport './App.css';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nexport default function App() {\r\n  const [step, setStep] = useState(1);\r\n  const [conn, setConn] = useState(null);\r\n  const [databases, setDatabases] = useState([]);\r\n  const [tables, setTables] = useState([]);\r\n  const [previewData, setPreviewData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [fakeData, setFakeData] = useState([]);\r\n  const [ctx, setCtx] = useState({}); // holds { database, table, classification }\r\n\r\n  const restart = () => {\r\n    setStep(1);\r\n    setConn(null);\r\n    setDatabases([]);\r\n    setTables([]);\r\n    setPreviewData([]);\r\n    setColumns([]);\r\n    setFakeData([]);\r\n    setCtx({});\r\n  };\r\n\r\n  // Step 1 → Connect & list databases\r\n  const handleConnect = async (props) => {\r\n    try {\r\n      const res = await axios.post(\r\n        `${API_URL}/api/connect/databases`,\r\n        props\r\n      );\r\n      setDatabases(res.data);\r\n      setConn(props);\r\n      setStep(2);\r\n    } catch (e) {\r\n      alert('Connection failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // Step 2 → Select database & list tables\r\n  const handleSelectDb = async (db) => {\r\n    try {\r\n      const res = await axios.post(\r\n        `${API_URL}/api/${encodeURIComponent(db)}/tables`,\r\n        conn\r\n      );\r\n      setTables(res.data);\r\n      setCtx((c) => ({ ...c, database: db }));\r\n      setStep(3);\r\n    } catch (e) {\r\n      alert('Load tables failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // Step 3 → Select table → fetch preview + classification → go to Step 4\r\n  const handleSelectTable = async (table) => {\r\n    try {\r\n      // 1) fetch table preview\r\n      const previewRes = await axios.post(\r\n        // note: limit=10 by default\r\n        `${API_URL}/api/${encodeURIComponent(ctx.database)}/tables/${encodeURIComponent(table)}/preview?limit=10`,\r\n        conn\r\n      );\r\n      setPreviewData(previewRes.data);\r\n\r\n      // 2) fetch classification suggestions\r\n      const classifyRes = await axios.post(\r\n        `${API_URL}/api/classify`,\r\n        {\r\n          ...conn,\r\n          database: ctx.database,\r\n          table,\r\n        }\r\n      );\r\n      setColumns(classifyRes.data);\r\n\r\n      setCtx((c) => ({ ...c, table }));\r\n      setStep(4);\r\n    } catch (e) {\r\n      alert('Error loading table/classification: ' + e.message);\r\n    }\r\n  };\r\n\r\n  // Step 4 → Complete classification → generate fake data\r\n  const handleClassificationComplete = async (classification) => {\r\n    try {\r\n      const res = await axios.post(`${API_URL}/api/fake`, {\r\n        ...conn,\r\n        database: ctx.database,\r\n        table: ctx.table,\r\n        columns: classification,\r\n      });\r\n      setFakeData(res.data);\r\n      setCtx((c) => ({ ...c, classification }));\r\n      setStep(5);\r\n    } catch (e) {\r\n      alert('Fake-data generation failed: ' + e.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {step === 1 && <ConnectionForm onConnect={handleConnect} />}\r\n\r\n      {step === 2 && (\r\n        <DatabaseSelector\r\n          databases={databases}\r\n          onSelectDb={handleSelectDb}\r\n          onBack={restart}\r\n        />\r\n      )}\r\n\r\n      {step === 3 && (\r\n        <TableSelector\r\n          tables={tables}\r\n          onSelectTable={handleSelectTable}\r\n          onBack={() => setStep(2)}\r\n        />\r\n      )}\r\n\r\n      {step === 4 && (\r\n        <ColumnClassifier\r\n          previewData={previewData}\r\n          columns={columns}\r\n          onComplete={handleClassificationComplete}\r\n          onBack={() => setStep(3)}\r\n        />\r\n      )}\r\n\r\n      {step === 5 && (\r\n        <FakeTableViewer\r\n          data={fakeData}\r\n          onRegenerate={() =>\r\n            handleClassificationComplete(ctx.classification)\r\n          }\r\n          onRestart={restart}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}